@using Arsenal.Models.ArsenalDataModels

@model IEnumerable<Transaction>

@{
    ViewData["Title"] = "Index";
}

<!-- Scripts that will load at the section defined in _layout.cshtml -->
@section Scripts{
    <script type="text/javascript">
        function helloWorld() {
            console.log('Hello World 2')
        }

        function getNewList() {
            var valueSelected = $('#temp').val();
            $.ajax(
                {
                    type: "POST",
                    url: "@Url.Action("Index", "Transactions")",
                    dataType: 'text',
                    data: { id: valueSelected },
                    success: function () {
                        console.log('success' + valueSelected)
                    },
                    error: function () {
                        console.log('fail' + valueSelected)
                    }
                });
        }
    </script>
}
<h2>Index</h2>

<p>
    <!-- creates a dropdownlist generated from all the different credit cards in the model given -->
    <a asp-action="Create">Create New</a>
    @Html.DropDownList(
        "temp",                                                                     //temporary name for dropdownlist as an object, TODO figure out how to get this linked up as a strongly typed namespace for an IEnumerable
        new SelectList(Model.Select(x => x.CreditCardLastFourDigits).Distinct()),   //Pulls distinct credit card numbers
        "Select Credit Card",                                                       //Placeholder name
        new { onchange = "getNewList()" }                                           //calls on a function onChange()
        )


    <a asp-action="Index" asp-route-id="2936">Test Button</a>
</p>
<table class="table">
    <!-- Pulls the name for each of the sections from the List<Transaction> -->
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TransactionDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GstAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PstAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PaymentType)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    <!-- Iterates through each of the Transaction Objects in the List<> passed through the controller-->
    @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.TransactionDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalAmount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GstAmount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PstAmount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentType)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.TransactionID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.TransactionID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.TransactionID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
